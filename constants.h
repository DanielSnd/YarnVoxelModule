#ifndef YARNVOXELCONSTANTS_H
#define YARNVOXELCONSTANTS_H
#include "core/math/basis.h"
#include "core/math/color.h"
#include "core/math/transform_3d.h"
#include "core/math/vector2i.h"
#include "core/math/vector3i.h"
#include "core/math/vector3.h"

static constexpr const char* YARNVOXEL_SETTINGS_BASE_PATH = "YarnVoxel";
static constexpr const int YARNVOXEL_CHUNK_WIDTH = 32;
static constexpr const int YARNVOXEL_CHUNK_HEIGHT = 32;
static constexpr const int16_t YARNVOXEL_TERRAIN_SURFACE = 0;
static const Vector3 YARNVOXEL_VECTOR3_ZERO = {0.0,0.0,0.0};
static const Vector3 YARNVOXEL_VECTOR3_ONE = {1.0,1.0,1.0};
static const Vector3i YARNVOXEL_VECTOR3I_ZERO = {0,0,0};
static const Vector2i YARNVOXEL_VECTOR2I_ZERO = {0,0};
static constexpr const int16_t ZERO_SHORT = 0;
static constexpr const int16_t BIT_LESS_THAN_ZERO_SHORT = -83;
static constexpr const int16_t BIT_MORE_THAN_ZERO_SHORT = 83;
static constexpr const int16_t LESS_THAN_ZERO_SHORT = -165;
static constexpr const int16_t MORE_THAN_ZERO_SHORT = 165;
static constexpr const int16_t ALMOST_FULL_SHORT = 13106;
static constexpr const int16_t ALMOST_EMPTY_SHORT = -13106;

inline int16_t floatToInt16(float value) {
    if (value <= -0.9999f) return INT16_MIN;
    return static_cast<int16_t>(value * INT16_MAX);
}

// Int16 to Float
inline float int16ToFloat(int16_t value) {
	return static_cast<float>(value) / static_cast<float>(INT16_MAX);
}

namespace YarnVoxelData {
	struct YVTriangleData {
		Vector3 v1;
		Vector3 v2;
		Vector3 v3;
		uint8_t desiredByte;
		uint8_t health;

		YVTriangleData() : v1(YARNVOXEL_VECTOR3I_ZERO),v2 (YARNVOXEL_VECTOR3I_ZERO), v3(YARNVOXEL_VECTOR3I_ZERO), desiredByte(1),health(1) {}
		YVTriangleData(Vector3 item1, Vector3 item2, Vector3 item3, uint8_t dbyte = 1, uint8_t health = 255)
			: v1(item1), v2(item2), v3(item3), desiredByte(dbyte), health(health) {}
			
		[[nodiscard]] Vector3 normal() const {
			return normalize(cross(v2 - v1, v3 - v1));
		}
	};

	struct YVPointValue {
		uint8_t byteValue;
		int16_t floatValue;
		uint8_t health;
		explicit YVPointValue(uint8_t bv = 0, int16_t fv = INT16_MAX, uint8_t hv = 255)
			: byteValue(bv), floatValue(fv), health(hv) {}
		[[nodiscard]] float get_float_value_as_float() const {
			return int16ToFloat(floatValue);
		}
		void set_float_value_as_float(const float _f) {
			floatValue = floatToInt16(_f);
		}
	};

	inline static const String BlockTypeToName[11] = {
		//NONE
		"Air",
		//GRASS
		"Grass",
		//DIRT
		"Dirt",
		//STONE
		"Stone",
		//SAND:
		"Sand",
		//IRON
		"Iron",
		//COPPER:
		"Copper",
		//BRONZE:
		"Bronze",
		//SILVER:
		"Silver",
		//GOLD:
		"Gold",
		//DIAMOND:
		"Diamond"
	};

	inline static const Color BlockTypeToColor[11] = {
		//NONE
		Color(0,0,0),
		//GRASS
		Color(0, 0.2, 0, 0),
		//DIRT
		Color(0, 1, 0, 0),
		//STONE
		Color(0, 0, 1, 0),
		//SAND:
		Color(1, 0, 0, 0),
		//IRON
		Color(0, 0, 1, 0.2),
		//COPPER:
		Color(0, 0, 1, 0.4),
		//BRONZE:
		Color(0, 0, 1, 0.6),
		//SILVER:
		Color(0, 0, 1, 0.8),
		//GOLD:
		Color(0, 0, 1, 0.9),
		//DIAMOND:
		Color(0, 0, 1, 1.0)
	};

	inline static const Vector3i CornerTable[8] = {
		{0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {0, 1, 0},
		{0, 0, 1},	{1, 0, 1}, {1, 1, 1}, {0, 1, 1}
	};

	inline static const Vector3i SurroundingTable[8] = {
		//RIGHT                    //FORWARD
		{1, 0, 0},  {0, 0, -1},
		//RIGHT FWD                //LEFT
		{1, 0, -1}, {-1, 0, 0},
		//BACK                    //LEFT BACK
		{0, 0, 1},  {-1, 0, 1},
		//RIGHT BACK			  //LEFT FWD
		{1, 0, 1},  {-1, 0, -1}
	};

	inline static const Vector3i SurroundingAndUpDownTable[24] = {
		{1, 0, 0}, {0, 0, -1}, {1, 0, -1},
		{-1, 0, 0},{0, 0, 1}, {-1, 0, 1},
		{1, 0, 1}, {-1, 0, -1},{1, 1, 0},
		{0, 1, -1}, {1, 1, -1}, {-1, 1, 0},
		{0, 1, 1}, {-1, 1, 1}, {1, 1, 1},
		{-1, 1, -1},{1, -1, 0}, {0, -1, -1},
		{1, -1, -1}, {-1, -1, 0},	{0, -1, 1},
		{-1, -1, 1}, {1, -1, 1}, {-1, -1, -1}
	};

	inline static const int EdgeIndexes[12][2] ={
		{0, 1}, {1, 2}, {3, 2},
		{0, 3}, {4, 5}, {5, 6},
		{7, 6}, {4, 7}, {0, 4},
		{1, 5}, {2, 6}, {3, 7}};

	inline static constexpr float ByteToFloat01[256] = {
		0.0, 0.003921569, 0.007843138, 0.01176471, 0.01568628, 0.01960784, 0.02352941, 0.02745098, 0.03137255, 0.03529412, 0.03921569, 0.04313726,
		0.04705882, 0.05098039, 0.05490196, 0.05882353, 0.0627451, 0.06666667, 0.07058824, 0.07450981, 0.07843138, 0.08235294, 0.08627451, 0.09019608,
		0.09411765, 0.09803922, 0.1019608, 0.1058824, 0.1098039, 0.1137255, 0.1176471, 0.1215686, 0.1254902, 0.1294118, 0.1333333, 0.1372549, 0.1411765,
		0.145098, 0.1490196, 0.1529412, 0.1568628, 0.1607843, 0.1647059, 0.1686275, 0.172549, 0.1764706, 0.1803922, 0.1843137, 0.1882353, 0.1921569, 0.1960784,
		0.2, 0.2039216, 0.2078431, 0.2117647, 0.2156863, 0.2196078, 0.2235294, 0.227451, 0.2313726, 0.2352941, 0.2392157, 0.2431373, 0.2470588, 0.2509804,
		0.254902, 0.2588235, 0.2627451, 0.2666667, 0.2705882, 0.2745098, 0.2784314, 0.282353, 0.2862745, 0.2901961, 0.2941177, 0.2980392, 0.3019608, 0.3058824,
		0.3098039, 0.3137255, 0.3176471, 0.3215686, 0.3254902, 0.3294118, 0.3333333, 0.3372549, 0.3411765, 0.345098, 0.3490196, 0.3529412, 0.3568628, 0.3607843,
		0.3647059, 0.3686275, 0.372549, 0.3764706, 0.3803922, 0.3843137, 0.3882353, 0.3921569, 0.3960784, 0.4, 0.4039216, 0.4078431, 0.4117647, 0.4156863,
		0.4196078, 0.4235294, 0.427451, 0.4313726, 0.4352941, 0.4392157, 0.4431373, 0.4470588, 0.4509804, 0.454902, 0.4588235, 0.4627451, 0.4666667, 0.4705882,
		0.4745098, 0.4784314, 0.4823529, 0.4862745, 0.4901961, 0.4941176, 0.4980392, 0.5019608, 0.5058824, 0.509804, 0.5137255, 0.5176471, 0.5215687, 0.5254902,
		0.5294118, 0.5333334, 0.5372549, 0.5411765, 0.5450981, 0.5490196, 0.5529412, 0.5568628, 0.5607843, 0.5647059, 0.5686275, 0.572549, 0.5764706, 0.5803922,
		0.5843138, 0.5882353, 0.5921569, 0.5960785, 0.6, 0.6039216, 0.6078432, 0.6117647, 0.6156863, 0.6196079, 0.6235294, 0.627451, 0.6313726, 0.6352941, 0.6392157,
		0.6431373, 0.6470588, 0.6509804, 0.654902, 0.6588235, 0.6627451, 0.6666667, 0.6705883, 0.6745098, 0.6784314, 0.682353, 0.6862745, 0.6901961, 0.6941177,
		0.6980392, 0.7019608, 0.7058824, 0.7098039, 0.7137255, 0.7176471, 0.7215686, 0.7254902, 0.7294118, 0.7333333, 0.7372549, 0.7411765, 0.7450981, 0.7490196,
		0.7529412, 0.7568628, 0.7607843, 0.7647059, 0.7686275, 0.772549, 0.7764706, 0.7803922, 0.7843137, 0.7882353, 0.7921569, 0.7960784, 0.8, 0.8039216, 0.8078431,
		0.8117647, 0.8156863, 0.8196079, 0.8235294, 0.827451, 0.8313726, 0.8352941, 0.8392157, 0.8431373, 0.8470588, 0.8509804, 0.854902, 0.8588235, 0.8627451,
		0.8666667, 0.8705882, 0.8745098, 0.8784314, 0.8823529, 0.8862745, 0.8901961, 0.8941177, 0.8980392, 0.9019608, 0.9058824, 0.9098039, 0.9137255, 0.9176471,
		0.9215686, 0.9254902, 0.9294118, 0.9333333, 0.9372549, 0.9411765, 0.945098, 0.9490196, 0.9529412, 0.9568627, 0.9607843, 0.9647059, 0.9686275, 0.972549,
		0.9764706, 0.9803922, 0.9843137, 0.9882353, 0.9921569, 0.9960784, 1.0
	};

	inline static constexpr int AverageSlopeTable[256] = {
		-999, -125, -125, -135, 55, -35, -90, -110, 55, -90, -35, -110, 45, -8, -8, -90, -125, -135, -125, -149, -35, -90, -98, -120, -35, -110, -65, -125, 4,
		-49, -27, -110, -125, -125, -135, -149, -35, -65, -110, -125, -35, -98, -90, -120, 4, -27, -30, -110, -135, -149, -149, -180, -90, -116, -120, -149,
		-90, -120, -116, -149, -45, -56, -56, -135, 55, -35, -35, -90, 45, 4, -8, -49, 55, -55, -5, -83, 31, 20, 55, -8, -35, -90, -65, -116, 4, -45, -27, -56,
		-5, -83, -35, -99, 6, -18, 29, -35, -90, -98, -110, -120, -8, -27, -90, -110, -55, -90, -83, -111, 20, -34, -8, -90, -110, -120, -125, -149, -49, -56,
		-110, -135, -83, -111, -99, -125, -18, -35, -35, -125, 55, -35, -35, -90, 55, -5, -55, -83, 45, -8, 4, -30, 31, 55, 20, -8, -90, -110, -98, -120, -55,
		-83, -90, -111, -8, -90, -27, -110, 20, -8, -34, -90, -35, -65, -90, -116, -5, -35, -83, -99, 4, -27, -45, -56, 6, 29, -18, -35, -110, -125, -120, -149,
		-83, -99, -111, -125, -30, -110, -56, -135, -18, -35, -35, -125, 45, 4, 4, -45, 31, 6, 20, -18, 31, 20, 6, -18, 0, 31, 31, 45, -8, -49, -27, -56, 20, -18,
		-34, -35, 55, -8, 29, -35, 31, 45, 55, 55, -8, -27, -30, -56, 55, 29, -8, -35, 20, -34, -18, -35, 31, 55, 45, 55, -90, -110, -110, -135, -8, -35, -90, -125,
		-8, -90, -35, -125, 45, 55, 55, -999
	};

	inline static constexpr  int TriangleAreaTable[256][6] = {
		{-1,-1,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {35,35,-1,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,43,50,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {50,50,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {22,22,-1,-1,-1,-1},
		{35,35,22,-1,-1,-1}, {35,35,22,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,22,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {22,22,22,-1,-1,-1}, {22,43,43,22,-1,-1},
		{35,35,22,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,22,-1,-1}, {22,43,50,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {35,35,-1,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {22,22,22,-1,-1,-1}, {22,43,50,-1,-1,-1}, {22,43,43,22,-1,-1}, {22,22,-1,-1,-1,-1}, {35,35,22,-1,-1,-1},
		{35,35,22,-1,-1,-1}, {35,65,35,22,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,43,50,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {22,43,50,-1,-1,-1}, {50,50,-1,-1,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,43,50,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,-1,-1,-1},
		{35,35,22,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,22,43,50,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,35,35,-1,-1}, {56,22,41,22,56,-1}, {56,22,41,22,56,-1},
		{35,35,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {35,35,22,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {35,35,22,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,22,-1,-1,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,22,-1,-1,-1}, {22,22,43,50,-1,-1}, {22,43,50,-1,-1,-1},
		{35,65,35,22,-1,-1}, {22,43,43,22,-1,-1}, {22,43,50,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,22,-1,-1,-1}, {22,43,50,22,-1,-1},
		{35,35,22,-1,-1,-1}, {35,35,35,35,-1,-1}, {22,22,43,50,-1,-1}, {56,22,41,22,56,-1}, {22,22,22,-1,-1,-1}, {22,43,50,22,-1,-1}, {22,22,22,22,-1,-1},
		{22,43,43,22,22,-1}, {22,43,50,22,-1,-1}, {56,22,41,22,56,-1}, {22,43,43,22,22,-1}, {22,43,22,43,-1,-1}, {35,35,-1,-1,-1,-1}, {35,35,22,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {50,50,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,22,-1,-1,-1},
		{35,35,35,35,-1,-1}, {22,43,50,22,-1,-1}, {56,22,41,22,56,-1}, {35,65,35,22,-1,-1}, {56,22,41,22,56,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,43,43,22,-1,-1}, {22,43,50,-1,-1,-1}, {35,65,35,22,-1,-1}, {56,22,41,22,56,-1}, {22,43,50,-1,-1,-1},
		{35,35,-1,-1,-1,-1}, {22,43,50,22,-1,-1}, {56,22,41,22,56,-1}, {22,43,43,22,22,-1}, {22,43,22,43,-1,-1}, {56,22,41,22,56,-1}, {22,22,-1,-1,-1,-1},
		{22,43,22,43,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,-1,-1,-1,-1},
		{22,22,22,-1,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,43,50,-1,-1}, {35,35,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,22,-1,-1,-1}, {35,65,35,22,-1,-1},
		{22,43,50,-1,-1,-1}, {22,43,43,22,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,22,-1,-1,-1},
		{35,65,35,22,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,43,50,-1,-1}, {35,35,35,35,-1,-1}, {56,22,41,22,56,-1}, {22,43,50,-1,-1,-1}, {50,50,-1,-1,-1,-1},
		{22,43,50,22,-1,-1}, {22,43,50,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,-1,-1,-1}, {56,22,41,22,56,-1}, {35,35,-1,-1,-1,-1}, {22,22,-1,-1,-1,-1},
		{22,22,22,-1,-1,-1}, {35,35,22,-1,-1,-1}, {22,22,43,50,-1,-1}, {22,22,22,-1,-1,-1}, {22,22,22,22,-1,-1}, {22,22,43,50,-1,-1}, {22,43,43,22,22,-1},
		{35,35,22,-1,-1,-1}, {22,43,50,22,-1,-1}, {35,35,35,35,-1,-1}, {56,22,41,22,56,-1}, {22,22,43,50,-1,-1}, {22,43,43,22,22,-1}, {56,22,41,22,56,-1},
		{22,43,22,43,-1,-1}, {22,43,50,-1,-1,-1}, {22,43,43,22,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,-1,-1,-1}, {22,43,50,22,-1,-1}, {22,43,43,22,22,-1},
		{56,22,41,22,56,-1}, {22,43,22,43,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,-1,-1,-1}, {56,22,41,22,56,-1}, {35,35,-1,-1,-1,-1}, {56,22,41,22,56,-1},
		{22,43,22,43,-1,-1}, {22,22,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {35,35,22,-1,-1,-1}, {35,35,22,-1,-1,-1}, {35,35,35,35,-1,-1},
		{22,43,50,-1,-1,-1}, {22,43,50,22,-1,-1}, {35,65,35,22,-1,-1}, {56,22,41,22,56,-1}, {22,43,50,-1,-1,-1}, {35,65,35,22,-1,-1}, {22,43,50,22,-1,-1},
		{56,22,41,22,56,-1}, {50,50,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,65,35,22,-1,-1},
		{22,43,50,22,-1,-1}, {56,22,41,22,56,-1}, {35,65,35,22,-1,-1}, {56,22,41,22,56,-1}, {56,22,41,22,56,-1}, {22,22,-1,-1,-1,-1}, {22,43,43,22,-1,-1},
		{22,43,50,-1,-1,-1}, {22,43,43,22,22,-1}, {22,43,22,43,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,43,22,43,-1,-1}, {22,-1,-1,-1,-1,-1},
		{22,43,50,-1,-1,-1}, {22,22,43,50,-1,-1}, {35,65,35,22,-1,-1}, {56,22,41,22,56,-1}, {22,43,43,22,-1,-1}, {22,43,43,22,22,-1}, {22,43,50,-1,-1,-1},
		{22,43,22,43,-1,-1}, {35,65,35,22,-1,-1}, {56,22,41,22,56,-1}, {56,22,41,22,56,-1}, {22,22,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {22,43,22,43,-1,-1},
		{35,35,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {50,50,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,43,50,-1,-1,-1},
		{22,43,22,43,-1,-1}, {35,35,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,43,50,-1,-1,-1}, {35,35,-1,-1,-1,-1}, {22,43,22,43,-1,-1}, {22,-1,-1,-1,-1,-1},
		{35,35,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {22,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1}
	};

	inline static const float SlopeTriangleTable[256][6] = {
		{-999,-999,-999,-999,-999,-999},{-125.2644,-999,-999,-999,-999,-999},{-125.2644,-999,-999,-999,-999,-999},{-135,-135,-999,-999,-999,-999},
		{54.73561,-999,-999,-999,-999,-999},{-125.2644,54.73561,-999,-999,-999,-999},{-90,-90,-999,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},
		{54.73561,-999,-999,-999,-999,-999},{-90,-90,-999,-999,-999,-999},{-125.2644,54.73561,-999,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},
		{45,45,-999,-999,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{-90,-90,-999,-999,-999,-999},
		{-125.2644,-999,-999,-999,-999,-999},{-135,-135,-999,-999,-999,-999},{-125.2644,-125.2644,-999,-999,-999,-999},{-125.2644,-125.2644,-180,-999,-999,-999},
		{54.73561,-125.2644,-999,-999,-999,-999},{-135,-135,54.73561,-999,-999,-999},{-90,-90,-125.2644,-999,-999,-999},{-90,-125.2644,-135,-125.2644,-999,-999},
		{-125.2644,54.73561,-999,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},{-125.2644,-125.2644,54.73561,-999,-999,-999},
		{-125.2644,-125.2644,-125.2644,-125.2644,-999,-999},{45,45,-125.2644,-999,-999,-999},{45,-125.2644,45,-125.2644,-999,-999},
		{-125.2644,54.73561,-90,54.73561,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},{-125.2644,-999,-999,-999,-999,-999},
		{-125.2644,-125.2644,-999,-999,-999,-999},{-135,-135,-999,-999,-999,-999},{-125.2644,-125.2644,-180,-999,-999,-999},{54.73561,-125.2644,-999,-999,-999,-999},
		{-125.2644,54.73561,-125.2644,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},{-125.2644,-125.2644,-125.2644,-125.2644,-999,-999},
		{-125.2644,54.73561,-999,-999,-999,-999},{-90,-90,-125.2644,-999,-999,-999},{-135,-135,54.73561,-999,-999,-999},{-135,-125.2644,-90,-125.2644,-999,-999},
		{45,45,-125.2644,-999,-999,-999},{-125.2644,54.73561,54.73561,-90,-999,-999},{-135,54.73561,-135,54.73561,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},
		{-135,-135,-999,-999,-999,-999},{-125.2644,-125.2644,-180,-999,-999,-999},{-125.2644,-125.2644,-180,-999,-999,-999},{-180,-180,-999,-999,-999,-999},
		{-135,-135,54.73561,-999,-999,-999},{54.73561,-125.2644,-125.2644,-180,-999,-999},{-90,-125.2644,-135,-125.2644,-999,-999},
		{-125.2644,-125.2644,-180,-999,-999,-999},{-135,-135,54.73561,-999,-999,-999},{-135,-125.2644,-90,-125.2644,-999,-999},{54.73561,-125.2644,-125.2644,-180,-999,-999},
		{-125.2644,-125.2644,-180,-999,-999,-999},{-135,-135,45,45,-999,-999},{-153.435,-125.2644,-107.5484,54.73561,63.43495,-999},
		{63.43495,54.73561,-107.5484,-125.2644,-153.435,-999},{-135,-135,-999,-999,-999,-999},{54.73561,-999,-999,-999,-999,-999},{-125.2644,54.73561,-999,-999,-999,-999},
		{-125.2644,54.73561,-999,-999,-999,-999},{-135,-135,54.73561,-999,-999,-999},{45,45,-999,-999,-999,-999},{45,45,-125.2644,-999,-999,-999},
		{54.73561,54.73561,-90,-999,-999,-999},{45,-125.2644,45,-125.2644,-999,-999},{54.73561,54.73561,-999,-999,-999,-999},{-90,-90,54.73561,-999,-999,-999},
		{-125.2644,54.73561,54.73561,-999,-999,-999},{54.73561,-125.2644,-125.2644,-90,-999,-999},{54.73561,54.73561,0,-999,-999,-999},{-90,54.73561,45,54.73561,-999,-999},
		{54.73561,54.73561,54.73561,54.73561,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{54.73561,-125.2644,-999,-999,-999,-999},{-135,-135,54.73561,-999,-999,-999},
		{-125.2644,54.73561,-125.2644,-999,-999,-999},{54.73561,-125.2644,-180,-125.2644,-999,-999},{45,45,-125.2644,-999,-999,-999},{45,45,-135,-135,-999,-999},
		{-125.2644,54.73561,54.73561,-90,-999,-999},{-153.435,-125.2644,-107.5484,54.73561,63.43495,-999},{54.73561,-125.2644,54.73561,-999,-999,-999},
		{54.73561,-125.2644,-90,-125.2644,-999,-999},{-125.2644,-125.2644,54.73561,54.73561,-999,-999},{-125.2644,-125.2644,-125.2644,-125.2644,54.73561,-999},
		{-125.2644,54.73561,0,54.73561,-999,-999},{26.56505,54.73561,72.4516,-125.2644,-116.565,-999},{54.73561,54.73561,54.73561,54.73561,-125.2644,-999},
		{54.73561,54.73561,-125.2644,-125.2644,-999,-999},{-90,-90,-999,-999,-999,-999},{-90,-90,-125.2644,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},
		{-135,-125.2644,-90,-125.2644,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{-125.2644,54.73561,54.73561,-90,-999,-999},{-90,-90,-999,-999,-999,-999},
		{-125.2644,-125.2644,-90,-999,-999,-999},{-90,-90,54.73561,-999,-999,-999},{-90,-90,-90,-90,-999,-999},{54.73561,-125.2644,-90,-125.2644,-999,-999},
		{-90,-125.2644,-154.7606,-125.2644,-90,-999},{-90,54.73561,45,54.73561,-999,-999},{-90,54.73561,25.2394,54.73561,-90,-999},{54.73561,54.73561,-90,-999,-999,-999},
		{-90,-90,-999,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},{-135,-125.2644,-90,-125.2644,-999,-999},{-125.2644,-125.2644,-125.2644,-125.2644,-999,-999},
		{-125.2644,-125.2644,-180,-999,-999,-999},{45,-125.2644,45,-125.2644,-999,-999},{63.43495,54.73561,-107.5484,-125.2644,-153.435,-999},{-125.2644,-125.2644,-90,-999,-999,-999},
		{-135,-135,-999,-999,-999,-999},{54.73561,-125.2644,-90,-125.2644,-999,-999},{-90,-125.2644,-154.7606,-125.2644,-90,-999},{-125.2644,-125.2644,-125.2644,-125.2644,54.73561,-999},
		{-125.2644,-125.2644,-125.2644,-125.2644,-999,-999},{-116.565,-125.2644,72.4516,54.73561,26.56505,-999},{54.73561,-125.2644,-999,-999,-999,-999},
		{-125.2644,-125.2644,54.73561,54.73561,-999,-999},{-125.2644,-999,-999,-999,-999,-999},{54.73561,-999,-999,-999,-999,-999},{-125.2644,54.73561,-999,-999,-999,-999},
		{-125.2644,54.73561,-999,-999,-999,-999},{-135,-135,54.73561,-999,-999,-999},{54.73561,54.73561,-999,-999,-999,-999},{54.73561,-125.2644,54.73561,-999,-999,-999},
		{-90,-90,54.73561,-999,-999,-999},{54.73561,-125.2644,-125.2644,-90,-999,-999},{45,45,-999,-999,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{45,45,-125.2644,-999,-999,-999},
		{-135,54.73561,-135,54.73561,-999,-999},{54.73561,54.73561,0,-999,-999,-999},{54.73561,54.73561,54.73561,54.73561,-999,-999},{45,54.73561,-90,54.73561,-999,-999},
		{54.73561,54.73561,-90,-999,-999,-999},{-90,-90,-999,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},{-90,-90,-125.2644,-999,-999,-999},
		{-90,-125.2644,-135,-125.2644,-999,-999},{-90,-90,54.73561,-999,-999,-999},{54.73561,-125.2644,-125.2644,-90,-999,-999},{-90,-90,-90,-90,-999,-999},
		{-90,-125.2644,-154.7606,-125.2644,-90,-999},{54.73561,54.73561,-90,-999,-999,-999},{-90,-90,-999,-999,-999,-999},{-125.2644,54.73561,-90,54.73561,-999,-999},
		{-125.2644,-125.2644,-90,-999,-999,-999},{45,54.73561,-90,54.73561,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{-90,54.73561,25.2394,54.73561,-90,-999},
		{-90,-90,-999,-999,-999,-999},{-125.2644,54.73561,-999,-999,-999,-999},{-125.2644,-125.2644,54.73561,-999,-999,-999},{-135,-135,54.73561,-999,-999,-999},
		{54.73561,-125.2644,-125.2644,-180,-999,-999},{-125.2644,54.73561,54.73561,-999,-999,-999},{54.73561,54.73561,-125.2644,-125.2644,-999,-999},
		{54.73561,-125.2644,-125.2644,-90,-999,-999},{-125.2644,-125.2644,-125.2644,-125.2644,54.73561,-999},{45,45,-125.2644,-999,-999,-999},
		{-125.2644,54.73561,-90,54.73561,-999,-999},{45,45,-135,-135,-999,-999},{63.43495,54.73561,-107.5484,-125.2644,-153.435,-999},{-125.2644,54.73561,54.73561,0,-999,-999},
		{54.73561,54.73561,54.73561,54.73561,-125.2644,-999},{-116.565,-125.2644,72.4516,54.73561,26.56505,-999},{54.73561,54.73561,-125.2644,-125.2644,-999,-999},
		{-125.2644,-125.2644,-90,-999,-999,-999},{-125.2644,-125.2644,-125.2644,-125.2644,-999,-999},{-90,-125.2644,-135,-125.2644,-999,-999},{-125.2644,-125.2644,-180,-999,-999,-999},
		{54.73561,-125.2644,-90,-125.2644,-999,-999},{-125.2644,-125.2644,-125.2644,-125.2644,54.73561,-999},{-90,-125.2644,-154.7606,-125.2644,-90,-999},
		{-125.2644,-125.2644,-125.2644,-125.2644,-999,-999},{-135,54.73561,-135,54.73561,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},
		{-153.435,-125.2644,-107.5484,54.73561,63.43495,-999},{-135,-135,-999,-999,-999,-999},{26.56505,54.73561,72.4516,-125.2644,-116.565,-999},
		{54.73561,54.73561,-125.2644,-125.2644,-999,-999},{54.73561,-125.2644,-999,-999,-999,-999},{-125.2644,-999,-999,-999,-999,-999},{45,45,-999,-999,-999,-999},
		{45,45,-125.2644,-999,-999,-999},{45,45,-125.2644,-999,-999,-999},{45,45,-135,-135,-999,-999},{54.73561,54.73561,0,-999,-999,-999},{-125.2644,54.73561,0,54.73561,-999,-999},
		{45,54.73561,-90,54.73561,-999,-999},{26.56505,54.73561,72.4516,-125.2644,-116.565,-999},{54.73561,54.73561,0,-999,-999,-999},{-90,54.73561,45,54.73561,-999,-999},
		{-125.2644,54.73561,0,54.73561,-999,-999},{-116.565,-125.2644,72.4516,54.73561,26.56505,-999},{0,0,-999,-999,-999,-999},{54.73561,54.73561,0,-999,-999,-999},
		{54.73561,54.73561,0,-999,-999,-999},{45,45,-999,-999,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{45,-125.2644,45,-125.2644,-999,-999},
		{-125.2644,54.73561,-90,54.73561,-999,-999},{63.43495,54.73561,-107.5484,-125.2644,-153.435,-999},{45,54.73561,-90,54.73561,-999,-999},
		{-116.565,-125.2644,72.4516,54.73561,26.56505,-999},{-90,54.73561,25.2394,54.73561,-90,-999},{54.73561,-125.2644,-999,-999,-999,-999},
		{54.73561,54.73561,54.73561,54.73561,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{54.73561,54.73561,54.73561,54.73561,-125.2644,-999},
		{54.73561,54.73561,-125.2644,-125.2644,-999,-999},{54.73561,54.73561,0,-999,-999,-999},{45,45,-999,-999,-999,-999},{54.73561,54.73561,54.73561,54.73561,-999,-999},
		{54.73561,-999,-999,-999,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{-125.2644,54.73561,54.73561,-90,-999,-999},{-135,54.73561,-135,54.73561,-999,-999},
		{-153.435,-125.2644,-107.5484,54.73561,63.43495,-999},{54.73561,54.73561,54.73561,54.73561,-999,-999},{54.73561,54.73561,54.73561,54.73561,-125.2644,-999},
		{54.73561,54.73561,-90,-999,-999,-999},{54.73561,54.73561,-125.2644,-125.2644,-999,-999},{-90,54.73561,45,54.73561,-999,-999},{-90,54.73561,25.2394,54.73561,-90,-999},
		{26.56505,54.73561,72.4516,-125.2644,-116.565,-999},{-125.2644,54.73561,-999,-999,-999,-999},{54.73561,54.73561,0,-999,-999,-999},{54.73561,54.73561,54.73561,54.73561,-999,-999},
		{45,45,-999,-999,-999,-999},{54.73561,-999,-999,-999,-999,-999},{-90,-90,-999,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},{-125.2644,-125.2644,-90,-999,-999,-999},
		{-135,-135,-999,-999,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{-125.2644,-125.2644,54.73561,54.73561,-999,-999},{-90,-90,-999,-999,-999,-999},
		{-125.2644,-999,-999,-999,-999,-999},{54.73561,54.73561,-90,-999,-999,-999},{-90,-90,-999,-999,-999,-999},{54.73561,54.73561,-125.2644,-125.2644,-999,-999},
		{-125.2644,-999,-999,-999,-999,-999},{45,45,-999,-999,-999,-999},{54.73561,-999,-999,-999,-999,-999},{54.73561,-999,-999,-999,-999,-999},{-999,-999,-999,-999,-999,-999}
	};

	inline static const float DotTriangleTable[256][6] = {
		{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},
		{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},
		{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},
		{0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},{0.0,0.0,-0.5773503,-2.0,-2.0,-2.0},{0.0,-0.5773503,-0.7071068,-0.5773503,-2.0,-2.0},
		{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.5773503,-2.0,-2.0,-2.0},
		{-0.5773503,-0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},{0.7071068,-0.5773503,0.7071068,-0.5773503,-2.0,-2.0},
		{-0.5773503,0.5773503,0.0,0.5773503,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},{0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,0.5773503,-0.5773503,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},
		{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{0.0,0.0,-0.5773503,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},{-0.7071068,-0.5773503,0.0,-0.5773503,-2.0,-2.0},
		{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,0.5773503,0.0,-2.0,-2.0},{-0.7071068,0.5773503,-0.7071068,0.5773503,-2.0,-2.0},
		{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},
		{-1,-1,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},{0.5773503,-0.5773503,-0.5773503,-1,-2.0,-2.0},{0.0,-0.5773503,-0.7071068,-0.5773503,-2.0,-2.0},
		{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},{-0.7071068,-0.5773503,0.0,-0.5773503,-2.0,-2.0},
		{0.5773503,-0.5773503,-0.5773503,-1,-2.0,-2.0},{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.7071068,0.7071068,-2.0,-2.0},
		{-0.8944272,-0.5773503,-0.3015113,0.5773503,0.4472136,-2.0},{0.4472136,0.5773503,-0.3015113,-0.5773503,-0.8944272,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},
		{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},
		{0.7071068,-0.5773503,0.7071068,-0.5773503,-2.0,-2.0},{0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{0.0,0.0,0.5773503,-2.0,-2.0,-2.0},
		{-0.5773503,0.5773503,0.5773503,-2.0,-2.0,-2.0},{0.5773503,-0.5773503,-0.5773503,0.0,-2.0,-2.0},{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},
		{0.0,0.5773503,0.7071068,0.5773503,-2.0,-2.0},{0.5773503,0.5773503,0.5773503,0.5773503,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},
		{0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,-0.5773503,-2.0,-2.0,-2.0},
		{0.5773503,-0.5773503,-1,-0.5773503,-2.0,-2.0},{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},{0.7071068,0.7071068,-0.7071068,-0.7071068,-2.0,-2.0},
		{-0.5773503,0.5773503,0.5773503,0.0,-2.0,-2.0},{-0.8944272,-0.5773503,-0.3015113,0.5773503,0.4472136,-2.0},{0.5773503,-0.5773503,0.5773503,-2.0,-2.0,-2.0},
		{0.5773503,-0.5773503,0.0,-0.5773503,-2.0,-2.0},{-0.5773503,-0.5773503,0.5773503,0.5773503,-2.0,-2.0},{-0.5773503,-0.5773503,-0.5773503,-0.5773503,0.5773503,-2.0},
		{-0.5773503,0.5773503,1,0.5773503,-2.0,-2.0},{0.8944272,0.5773503,0.3015113,-0.5773503,-0.4472136,-2.0},{0.5773503,0.5773503,0.5773503,0.5773503,-0.5773503,-2.0},
		{0.5773503,0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{0.0,0.0,-0.5773503,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},
		{-0.7071068,-0.5773503,0.0,-0.5773503,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,0.5773503,0.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{0.0,0.0,0.5773503,-2.0,-2.0,-2.0},{0.0,0.0,0.0,0.0,-2.0,-2.0},{0.5773503,-0.5773503,0.0,-0.5773503,-2.0,-2.0},
		{0.0,-0.5773503,-0.904534,-0.5773503,0.0,-2.0},{0.0,0.5773503,0.7071068,0.5773503,-2.0,-2.0},{0.0,0.5773503,0.904534,0.5773503,0.0,-2.0},
		{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.7071068,-0.5773503,0.0,-0.5773503,-2.0,-2.0},
		{-0.5773503,-0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},{0.7071068,-0.5773503,0.7071068,-0.5773503,-2.0,-2.0},
		{0.4472136,0.5773503,-0.3015113,-0.5773503,-0.8944272,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,-0.5773503,0.0,-0.5773503,-2.0,-2.0},{0.0,-0.5773503,-0.904534,-0.5773503,0.0,-2.0},{-0.5773503,-0.5773503,-0.5773503,-0.5773503,0.5773503,-2.0},
		{-0.5773503,-0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{-0.4472136,-0.5773503,0.3015113,0.5773503,0.8944272,-2.0},{0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,-0.5773503,0.5773503,0.5773503,-2.0,-2.0},{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},{0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,-0.5773503,0.5773503,-2.0,-2.0,-2.0},{0.0,0.0,0.5773503,-2.0,-2.0,-2.0},{0.5773503,-0.5773503,-0.5773503,0.0,-2.0,-2.0},
		{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},
		{-0.7071068,0.5773503,-0.7071068,0.5773503,-2.0,-2.0},{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.5773503,0.5773503,-2.0,-2.0},
		{0.7071068,0.5773503,0.0,0.5773503,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},
		{0.0,0.0,-0.5773503,-2.0,-2.0,-2.0},{0.0,-0.5773503,-0.7071068,-0.5773503,-2.0,-2.0},{0.0,0.0,0.5773503,-2.0,-2.0,-2.0},{0.5773503,-0.5773503,-0.5773503,0.0,-2.0,-2.0},
		{0.0,0.0,0.0,0.0,-2.0,-2.0},{0.0,-0.5773503,-0.904534,-0.5773503,0.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,0.5773503,0.0,0.5773503,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{0.7071068,0.5773503,0.0,0.5773503,-2.0,-2.0},
		{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.0,0.5773503,0.904534,0.5773503,0.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,-0.5773503,0.5773503,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,0.5773503,-2.0,-2.0,-2.0},{0.5773503,-0.5773503,-0.5773503,-1,-2.0,-2.0},
		{-0.5773503,0.5773503,0.5773503,-2.0,-2.0,-2.0},{0.5773503,0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{0.5773503,-0.5773503,-0.5773503,0.0,-2.0,-2.0},
		{-0.5773503,-0.5773503,-0.5773503,-0.5773503,0.5773503,-2.0},{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},{-0.5773503,0.5773503,0.0,0.5773503,-2.0,-2.0},
		{0.7071068,0.7071068,-0.7071068,-0.7071068,-2.0,-2.0},{0.4472136,0.5773503,-0.3015113,-0.5773503,-0.8944272,-2.0},{-0.5773503,0.5773503,0.5773503,1,-2.0,-2.0},
		{0.5773503,0.5773503,0.5773503,0.5773503,-0.5773503,-2.0},{-0.4472136,-0.5773503,0.3015113,0.5773503,0.8944272,-2.0},{0.5773503,0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},
		{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{0.0,-0.5773503,-0.7071068,-0.5773503,-2.0,-2.0},
		{-0.5773503,-0.5773503,-1,-2.0,-2.0,-2.0},{0.5773503,-0.5773503,0.0,-0.5773503,-2.0,-2.0},{-0.5773503,-0.5773503,-0.5773503,-0.5773503,0.5773503,-2.0},
		{0.0,-0.5773503,-0.904534,-0.5773503,0.0,-2.0},{-0.5773503,-0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{-0.7071068,0.5773503,-0.7071068,0.5773503,-2.0,-2.0},
		{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.8944272,-0.5773503,-0.3015113,0.5773503,0.4472136,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},
		{0.8944272,0.5773503,0.3015113,-0.5773503,-0.4472136,-2.0},{0.5773503,0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},
		{0.7071068,0.7071068,-0.5773503,-2.0,-2.0,-2.0},{0.7071068,0.7071068,-0.7071068,-0.7071068,-2.0,-2.0},{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},
		{-0.5773503,0.5773503,1,0.5773503,-2.0,-2.0},{0.7071068,0.5773503,0.0,0.5773503,-2.0,-2.0},{0.8944272,0.5773503,0.3015113,-0.5773503,-0.4472136,-2.0},
		{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},{0.0,0.5773503,0.7071068,0.5773503,-2.0,-2.0},{-0.5773503,0.5773503,1,0.5773503,-2.0,-2.0},
		{-0.4472136,-0.5773503,0.3015113,0.5773503,0.8944272,-2.0},{1,1,-2.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},
		{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.7071068,-0.5773503,0.7071068,-0.5773503,-2.0,-2.0},
		{-0.5773503,0.5773503,0.0,0.5773503,-2.0,-2.0},{0.4472136,0.5773503,-0.3015113,-0.5773503,-0.8944272,-2.0},{0.7071068,0.5773503,0.0,0.5773503,-2.0,-2.0},
		{-0.4472136,-0.5773503,0.3015113,0.5773503,0.8944272,-2.0},{0.0,0.5773503,0.904534,0.5773503,0.0,-2.0},{0.5773503,-0.5773503,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,0.5773503,0.5773503,0.5773503,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.5773503,0.5773503,-0.5773503,-2.0},
		{0.5773503,0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,0.5773503,0.5773503,0.5773503,-2.0,-2.0},{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},
		{-0.5773503,0.5773503,0.5773503,0.0,-2.0,-2.0},{-0.7071068,0.5773503,-0.7071068,0.5773503,-2.0,-2.0},{-0.8944272,-0.5773503,-0.3015113,0.5773503,0.4472136,-2.0},
		{0.5773503,0.5773503,0.5773503,0.5773503,-2.0,-2.0},{0.5773503,0.5773503,0.5773503,0.5773503,-0.5773503,-2.0},{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},
		{0.5773503,0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{0.0,0.5773503,0.7071068,0.5773503,-2.0,-2.0},{0.0,0.5773503,0.904534,0.5773503,0.0,-2.0},
		{0.8944272,0.5773503,0.3015113,-0.5773503,-0.4472136,-2.0},{-0.5773503,0.5773503,-2.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,1,-2.0,-2.0,-2.0},
		{0.5773503,0.5773503,0.5773503,0.5773503,-2.0,-2.0},{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},
		{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.0,-2.0,-2.0,-2.0},{-0.7071068,-0.7071068,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{-0.5773503,-0.5773503,0.5773503,0.5773503,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},
		{0.5773503,0.5773503,0.0,-2.0,-2.0,-2.0},{0.0,0.0,-2.0,-2.0,-2.0,-2.0},{0.5773503,0.5773503,-0.5773503,-0.5773503,-2.0,-2.0},{-0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},
		{0.7071068,0.7071068,-2.0,-2.0,-2.0,-2.0},{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{0.5773503,-2.0,-2.0,-2.0,-2.0,-2.0},{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0}
	};

    inline static const int TriangleTable[256][16] = {
	    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
	    {3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
	    {3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
	    {3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
	    {9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
	    {9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
	    {2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
	    {8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
	    {9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
	    {4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
	    {3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
	    {1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
	    {4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
	    {4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
	    {9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
	    {5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
	    {2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
	    {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
	    {0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
	    {2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
	    {10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
	    {4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
	    {5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
	    {5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
	    {9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
	    {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
	    {1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
	    {10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
	    {8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
	    {2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
	    {7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
	    {9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
	    {2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
	    {11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
	    {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
	    {5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
	    {11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
	    {11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
	    {1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
	    {9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
	    {5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
	    {2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
	    {0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
	    {5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
	    {6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
	    {3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
	    {6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
	    {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
	    {1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
	    {10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
	    {6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
	    {8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
	    {7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
	    {3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
	    {5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
	    {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
	    {9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
	    {8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
	    {5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
	    {0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
	    {6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
	    {10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
	    {10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
	    {8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
	    {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
	    {3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
	    {0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
	    {10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
	    {3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
	    {6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
	    {9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
	    {8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
	    {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
	    {6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
	    {0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
	    {10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
	    {10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
	    {2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
	    {7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
	    {7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
	    {2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
	    {1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
	    {11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
	    {8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
	    {0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
	    {7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
	    {10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
	    {2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
	    {6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
	    {7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
	    {2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
	    {1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
	    {10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
	    {10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
	    {0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
	    {7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
	    {6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
	    {8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
	    {9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
	    {6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
	    {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
	    {10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
	    {8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
	    {0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
	    {1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
	    {8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
	    {10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
	    {4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
	    {10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
	    {5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
	    {11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
	    {9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
	    {6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
	    {7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
	    {3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
	    {7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
	    {9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
	    {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
	    {6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
	    {9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
	    {1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
	    {4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
	    {7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
	    {6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
	    {3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
	    {0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
	    {6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
	    {0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
	    {11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
	    {6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
	    {5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
	    {9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
	    {1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
	    {1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
	    {10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
	    {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
	    {5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
	    {10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
	    {11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
	    {9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
	    {7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
	    {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
	    {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
	    {9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
	    {9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
	    {1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
	    {9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
	    {9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
	    {5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
	    {0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
	    {10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
	    {2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
	    {0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
	    {0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
	    {9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
	    {5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
	    {3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
	    {5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
	    {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
	    {9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
	    {0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
	    {1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
	    {3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
	    {4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
	    {9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
	    {11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
	    {11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
	    {2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
	    {9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
	    {3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
	    {1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
	    {4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
	    {4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
	    {0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
	    {3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
	    {3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
	    {0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
	    {9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
	    {1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
    };

	// ReSharper disable once CppMemberFunctionMayBeStatic
	inline Vector3 CalculateBottomCornerForChunkInNumber(Vector3i ChunkNumber) {
		return {static_cast<real_t>(ChunkNumber.x) * YARNVOXEL_CHUNK_WIDTH, static_cast<real_t>(ChunkNumber.y) * YARNVOXEL_CHUNK_HEIGHT,
				static_cast<real_t>(ChunkNumber.z) * YARNVOXEL_CHUNK_WIDTH};
	}
	static _ALWAYS_INLINE_ Vector3 lerp(const Vector3 &p_from, const Vector3 &p_to, const real_t p_weight) {
		Vector3 res = YARNVOXEL_VECTOR3_ZERO;
		res.x = Math::lerp(p_from.x, p_to.x, p_weight);
		res.y = Math::lerp(p_from.y, p_to.y, p_weight);
		res.z = Math::lerp(p_from.z, p_to.z, p_weight);
		return res;
	}

	static _ALWAYS_INLINE_ Vector3 cross(const Vector3 &p_from, const Vector3 &p_with) {
		Vector3 ret(
				(p_from.y * p_with.z) - (p_from.z * p_with.y),
				(p_from.z * p_with.x) - (p_from.x * p_with.z),
				(p_from.x * p_with.y) - (p_from.y * p_with.x));
		return ret;
	}

	static _ALWAYS_INLINE_ Vector3 normalize(const Vector3 &n_vector) {
		const real_t x2 = n_vector.x * n_vector.x;
		const real_t y2 = n_vector.y * n_vector.y;
		const real_t z2 = n_vector.z * n_vector.z;
		const real_t lengthsq = x2 + y2 + z2;
		auto return_v = Vector3{n_vector.x,n_vector.y,n_vector.z};
		if (lengthsq == 0) {
			return_v.x = return_v.y = return_v.z = 0;
		} else {
			const real_t length = Math::sqrt(lengthsq);
			return_v.x /= length;
			return_v.y /= length;
			return_v.z /= length;
		}
		return return_v;
	}
	struct YVPropTriangleData {
		Vector3i chunk_number;
		Vector3 v1;
		Vector3 v2;
		Vector3 v3;
		uint8_t desiredByte;
		Vector2i march_index_triangle_index;

		YVPropTriangleData() :chunk_number(YARNVOXEL_VECTOR3I_ZERO),  v1(YARNVOXEL_VECTOR3I_ZERO),v2 (YARNVOXEL_VECTOR3I_ZERO), v3(YARNVOXEL_VECTOR3I_ZERO), desiredByte(1),march_index_triangle_index(YARNVOXEL_VECTOR2I_ZERO) {}
		YVPropTriangleData(Vector3i c_number, Vector3 item1, Vector3 item2, Vector3 item3, Vector2i mindex_tindex , uint8_t dbyte = 1)
			: chunk_number(c_number), v1(item1), v2(item2), v3(item3), desiredByte(dbyte), march_index_triangle_index(mindex_tindex) {}

		[[nodiscard]] float dot_product() const {
			return DotTriangleTable[march_index_triangle_index.x][march_index_triangle_index.y];
		}
		[[nodiscard]] float slope() const {
			return SlopeTriangleTable[march_index_triangle_index.x][march_index_triangle_index.y];
		}
		[[nodiscard]] int average_slope() const {
			return AverageSlopeTable[march_index_triangle_index.x];
		}
		[[nodiscard]] Vector3 center_pos_lerped(float lerp1 =0.5f, float lerp2=0.5f) const {
			return lerp(lerp(v1,v2,lerp1),v3,lerp2);
		}
		[[nodiscard]] Vector3 center_pos() const {
			return center_pos_lerped();
		}
		[[nodiscard]] Vector3 world_center_pos() const {
			return CalculateBottomCornerForChunkInNumber(chunk_number) + center_pos_lerped();
		}
		[[nodiscard]] Vector3 normal() const {
			return normalize(cross(v2 - v1, v3 - v1));
		}
	};

	inline Vector3 vector3rotate(const Vector3 &v_dir, const Vector3 &p_axis, const real_t p_angle) {
		return Basis(p_axis, p_angle).xform(v_dir);
	}

	inline Basis CreateBasisFromScaleAndLook(const Vector3 &forward, const Vector3 &up,const Vector3 &scale) {
	 	Vector3 v_z = normalize(forward);
	 	Vector3 v_x = normalize(cross(up,v_z));
	 	Vector3 v_y = cross(v_z,v_x);
		auto new_basis = Basis(v_x,v_y,v_z);
	 	//new_basis.scale(scale);
		return new_basis;
	}
	inline Transform3D CreateTransformFromPosScaleLook(const Vector3 &ppos, const Vector3 &fforward, const Vector3 &uup,const Vector3 &sscale) {
		 auto rightt = cross(normalize(fforward),normalize(uup));
		//  auto new_scale = sscale;
		// new_scale.z = sscale.z;
		 auto newtrans = Transform3D(rightt,uup,fforward * -1,ppos).scaled(sscale);
		 newtrans.set_origin(ppos);
		return newtrans;
		//return Transform3D(Vector3(1,0,0),Vector3(0,1,0),Vector3(0,0,-1),ppos);
		//return {CreateBasisFromScaleAndLook(forward,up,scale),pos};
	}

	inline Vector3 CalculateForwardVectorFromAngleAndUp(const Vector3& up, float angle) {
		// If the angle is zero, the forward vector should be the normalized cross product of the up vector and the arbitrary vector
		if (angle == 0) {
			return normalize(cross(up,Vector3(1, 0, 0)));
		}
		return vector3rotate(normalize(cross(up,Vector3(1, 0, 0))),up, angle);
	}

}
#endif //YARNVOXELCONSTANTS_H

