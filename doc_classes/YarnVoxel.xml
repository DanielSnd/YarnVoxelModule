<?xml version="1.0" encoding="UTF-8" ?>
<class name="YarnVoxel" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A voxel engine system that allows for procedural terrain generation and manipulation using marching cubes.
	</brief_description>
	<description>
		YarnVoxel is a voxel engine implementation that provides a complete system for generating, managing, and manipulating voxel-based terrain. It uses a chunk-based system to efficiently handle large terrains.
		
		The terrain is divided into chunks (YVoxelChunk objects) which are generated and rendered independently. Each chunk contains a 3D grid of points that define the terrain's density values.
		
		Key features include:
		- Procedural terrain generation using Perlin noise
		- Chunk-based terrain management for efficient memory usage and rendering
		- Marching cubes algorithm for smooth terrain mesh generation
		- Ability to modify terrain in real-time (digging, building, etc.)
		- Material system for terrain appearance
		- Optional grass generation
		
		The voxel data is structured with float values representing density (negative values are inside the terrain, positive values are outside) and byte values representing different block types (grass, dirt, stone, etc.).
		
		To use YarnVoxel:
		1. Set up a parent Node3D as the main_node where chunks will be spawned
		2. Configure terrain parameters like cell_size
		3. Set a material for rendering the terrain
		4. Manipulate terrain using methods like set_value_at() and damage_voxel_area()
		
		YarnVoxel automatically handles chunk creation, updating, and rendering. When modifications are made to the terrain, only affected chunks are regenerated.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_all_chunks">
			<return type="void" />
			<description>
				Removes all existing chunks from the scene and clears the internal chunk dictionary.
			</description>
		</method>
		<method name="damage_voxel_area">
			<return type="bool" />
			<param index="0" name="world_pos" type="Vector3i" />
			<param index="1" name="amount" type="int" default="30" />
			<param index="2" name="size" type="int" default="1" />
			<description>
				Damages voxels around the specified world position. Returns true if any voxels were damaged.
				
				Parameters:
				- world_pos: The center position of the area to damage
				- amount: Amount of damage to apply (reduces voxel health)
				- size: Radius of the spherical area to affect
				
				When a voxel's health reaches zero, it is destroyed and the "destroyed_voxels" signal is emitted.
			</description>
		</method>
		<method name="find_closest_solid_point_to">
			<return type="Array" />
			<param index="0" name="world_position" type="Vector3" />
			<description>
				Finds the closest solid voxel point to the given world position. Returns an Array containing the position of the closest solid point, or an empty Array if no solid point is found within the search radius.
			</description>
		</method>
		<method name="get_block_type">
			<return type="int" />
			<param index="0" name="worldPostion" type="Vector3" />
			<description>
				Returns the block type (as defined in the BlockType enum) at the specified world position.
			</description>
		</method>
		<method name="get_bottom_corner_for_chunk">
			<return type="Vector3" />
			<param index="0" name="chunkNumber" type="Vector3i" />
			<description>
				Returns the world position of the bottom corner (minimum point) of the specified chunk.
			</description>
		</method>
		<method name="get_cell_center">
			<return type="Vector3" />
			<param index="0" name="gridPosition" type="Vector2i" />
			<description>
				Returns the world position of the center of a cell at the specified grid position.
			</description>
		</method>
		<method name="get_chunk">
			<return type="YVoxelChunk" />
			<param index="0" name="chunkPosition" type="Vector3i" />
			<description>
				Returns the YVoxelChunk at the specified chunk position. If the chunk doesn't exist, it will be created.
			</description>
		</method>
		<method name="get_chunk_center">
			<return type="Vector3" />
			<param index="0" name="chunkNumber" type="Vector3i" />
			<description>
				Returns the world position of the center of the specified chunk.
			</description>
		</method>
		<method name="get_chunk_number_from_pos">
			<return type="Vector3i" />
			<param index="0" name="worldPostion" type="Vector3" />
			<description>
				Converts a world position to its corresponding chunk coordinates.
			</description>
		</method>
		<method name="get_chunks" qualifiers="const">
			<return type="YVoxelChunk[]" />
			<description>
				Returns an array of all currently active YVoxelChunk objects.
			</description>
		</method>
		<method name="get_float_value">
			<return type="int" />
			<param index="0" name="worldPostion" type="Vector3" />
			<description>
				Returns the density float value at the specified world position. Negative values are inside the terrain, positive values are outside.
			</description>
		</method>
		<method name="get_grid_position">
			<return type="Vector2i" />
			<param index="0" name="worldPosition" type="Vector3" />
			<description>
				Converts a world position to its corresponding 2D grid position (X and Z coordinates).
			</description>
		</method>
		<method name="get_hash_key">
			<return type="int" />
			<param index="0" name="worldPostion" type="Vector3" />
			<description>
				Returns a unique hash key for the specified world position, used for internal lookups.
			</description>
		</method>
		<method name="get_is_generating" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if the voxel engine is currently generating or updating chunks.
			</description>
		</method>
		<method name="get_material">
			<return type="Material" />
			<description>
				Returns the material currently used for rendering voxel terrain. If no material is set, returns a default shader material.
			</description>
		</method>
		<method name="get_perlin">
			<return type="float" />
			<param index="0" name="pos_x" type="float" />
			<param index="1" name="pos_y" type="float" />
			<description>
				Returns a 2D Perlin noise value at the specified coordinates, useful for terrain generation.
			</description>
		</method>
		<method name="get_perlin_3d">
			<return type="float" />
			<param index="0" name="pos_x" type="float" />
			<param index="1" name="pos_y" type="float" />
			<param index="2" name="pos_z" type="float" />
			<description>
				Returns a 3D Perlin noise value at the specified coordinates, useful for terrain generation.
			</description>
		</method>
		<method name="get_point_number_from_pos">
			<return type="Vector3i" />
			<param index="0" name="worldPostion" type="Vector3" />
			<description>
				Converts a world position to its corresponding point coordinates within a chunk.
			</description>
		</method>
		<method name="regenerate_all_chunks">
			<return type="void" />
			<description>
				Marks all existing chunks as dirty and regenerates them. This is useful after making large-scale terrain changes.
			</description>
		</method>
		<method name="set_material">
			<return type="void" />
			<param index="0" name="material" type="Material" />
			<description>
				Sets the material used for rendering voxel terrain meshes.
			</description>
		</method>
		<method name="set_value">
			<return type="void" />
			<param index="0" name="value" type="float" />
			<param index="1" name="block_type" type="int" default="1" />
			<param index="2" name="health" type="int" default="255" />
			<description>
				Sets the voxel value at the position specified by debug_pos. This is primarily for testing purposes.
				
				Parameters:
				- value: The density value to set (negative values are inside terrain, positive are outside)
				- block_type: The type of block to set (from BlockType enum)
				- health: The health value of the block (affects resistance to damage)
			</description>
		</method>
		<method name="set_value_at">
			<return type="void" />
			<param index="0" name="position" type="Vector3i" />
			<param index="1" name="value" type="float" />
			<param index="2" name="block_type" type="int" default="1" />
			<param index="3" name="health" type="int" default="255" />
			<description>
				Sets the voxel value at the specified world position.
				
				Parameters:
				- position: World position to modify
				- value: The density value to set (negative values are inside terrain, positive are outside)
				- block_type: The type of block to set (from BlockType enum)
				- health: The health value of the block (affects resistance to damage)
			</description>
		</method>
		<method name="try_get_chunk">
			<return type="YVoxelChunk" />
			<param index="0" name="chunk_number" type="Vector3i" />
			<description>
				Attempts to get the YVoxelChunk at the specified chunk position. Returns null if the chunk doesn't exist (unlike get_chunk which creates the chunk if it doesn't exist).
			</description>
		</method>
	</methods>
	<members>
		<member name="cell_size" type="int" setter="set_cell_size" getter="get_cell_size" default="256">
			The size of grid cells used for terrain calculations. Larger values make terrain more spread out.
		</member>
		<member name="debug_pos" type="Vector3i" setter="set_debug_pos" getter="get_debug_pos" default="Vector3i(0, 0, 0)">
			A position used for debugging operations, such as the target for the set_value method.
		</member>
		<member name="debugging_chunk" type="Vector3i" setter="set_debugging_chunk" getter="get_debugging_chunk" default="Vector3i(0, 0, 0)">
			The chunk coordinates used for debugging when is_debugging_chunk is true.
		</member>
		<member name="debugging_config" type="int" setter="set_debugging_config" getter="get_debugging_config" default="0">
			Configuration value used for various debugging options.
		</member>
		<member name="generate_grass" type="bool" setter="set_generate_grass" getter="get_generate_grass" default="false">
			Whether to generate grass on suitable terrain surfaces. Requires grass_mesh and grass_material to be set.
		</member>
		<member name="grass_material" type="Material" setter="set_grass_material" getter="get_grass_material">
			The material to use for rendering grass instances when generate_grass is true.
		</member>
		<member name="grass_mesh" type="Mesh" setter="set_grass_mesh" getter="get_grass_mesh">
			The mesh to use for rendering grass instances when generate_grass is true.
		</member>
		<member name="is_debugging_chunk" type="bool" setter="set_is_debugging_chunk" getter="get_is_debugging_chunk" default="false">
			Whether to enable debugging for the chunk specified by debugging_chunk.
		</member>
		<member name="is_inverted_marching_cubes" type="bool" setter="set_is_inverted_marching_cubes" getter="get_is_inverted_marching_cubes" default="false">
			When true, inverts the marching cubes algorithm. This can be useful for creating cave-like interior spaces.
		</member>
		<member name="main_node" type="Node3D" setter="set_main_node" getter="get_main_node">
			The parent Node3D where all voxel chunks will be spawned as children. If not set, the system will attempt to use the current scene root.
		</member>
	</members>
	<signals>
		<signal name="destroyed_voxels">
			<param index="0" name="blocks" type="Array" />
			<description>
				Emitted when voxels are destroyed by the damage_voxel_area method. The blocks parameter contains information about the destroyed voxels.
			</description>
		</signal>
		<signal name="finished">
			<description>
				Emitted when all queued chunk generation/updates have completed.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NONE" value="0" enum="BlockType">
			Represents an empty or air block.
		</constant>
		<constant name="GRASS" value="1" enum="BlockType">
			Represents a grass block type.
		</constant>
		<constant name="DIRT" value="2" enum="BlockType">
			Represents a dirt block type.
		</constant>
		<constant name="STONE" value="3" enum="BlockType">
			Represents a stone block type.
		</constant>
		<constant name="SAND" value="4" enum="BlockType">
			Represents a sand block type.
		</constant>
		<constant name="IRON" value="5" enum="BlockType">
			Represents an iron ore block type.
		</constant>
		<constant name="COPPER" value="6" enum="BlockType">
			Represents a copper ore block type.
		</constant>
		<constant name="BRONZE" value="7" enum="BlockType">
			Represents a bronze ore block type.
		</constant>
		<constant name="SILVER" value="8" enum="BlockType">
			Represents a silver ore block type.
		</constant>
		<constant name="GOLD" value="9" enum="BlockType">
			Represents a gold ore block type.
		</constant>
		<constant name="DIAMOND" value="10" enum="BlockType">
			Represents a diamond ore block type.
		</constant>
	</constants>
</class>
