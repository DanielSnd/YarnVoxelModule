<?xml version="1.0" encoding="UTF-8" ?>
<class name="YarnVoxel" inherits="Node3D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A voxel engine system that allows for procedural terrain generation and manipulation using marching cubes.
	</brief_description>
	<description>
		YarnVoxel is a voxel engine implementation that provides a complete system for generating, managing, and manipulating voxel-based terrain. It uses a chunk-based system to efficiently handle large terrains.

		The terrain is divided into chunks (YVoxelChunk objects) which are generated and rendered independently. Each chunk contains a 3D grid of points that define the terrain's density values.

		Key features include:
		- Procedural terrain generation using Perlin noise
		- Chunk-based terrain management for efficient memory usage and rendering
		- Marching cubes algorithm for smooth terrain mesh generation
		- Ability to modify terrain in real-time (digging, building, etc.)
		- Material system for terrain appearance
		- Optional grass generation

		The voxel data is structured with float values representing density (negative values are inside the terrain, positive values are outside) and byte values representing different block types (grass, dirt, stone, etc.).

		To use YarnVoxel:
		1. Set up a parent Node3D as the main_node where chunks will be spawned
		2. Configure terrain parameters like cell_size
		3. Set a material for rendering the terrain
		4. Manipulate terrain using methods like set_value_at() and damage_voxel_area()

		YarnVoxel automatically handles chunk creation, updating, and rendering. When modifications are made to the terrain, only affected chunks are regenerated.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_line">
			<return type="void" />
			<param index="0" name="start" type="Vector3i" />
			<param index="1" name="end" type="Vector3i" />
			<param index="2" name="amount" type="float" />
			<param index="3" name="typeOfBlock" type="int" default="1" />
			<param index="4" name="thicknessStart" type="int" default="1" />
			<param index="5" name="thicknessEnd" type="int" default="1" />
			<description>
			</description>
		</method>
		<method name="change_float_at_position">
			<return type="void" />
			<param index="0" name="position" type="Vector3i" />
			<param index="1" name="newFloat" type="float" />
			<param index="2" name="newBlockType" type="int" />
			<param index="3" name="health" type="int" default="255" />
			<description>
			</description>
		</method>
		<method name="change_health_at_position">
			<return type="void" />
			<param index="0" name="position" type="Vector3i" />
			<param index="1" name="newHealth" type="int" />
			<description>
			</description>
		</method>
		<method name="damage_voxel_area">
			<return type="bool" />
			<param index="0" name="pos" type="Vector3i" />
			<param index="1" name="amount" type="int" />
			<param index="2" name="brushSize" type="int" />
			<description>
				Damages voxels around the specified world position. Returns true if any voxels were damaged.

				Parameters:
				- world_pos: The center position of the area to damage
				- amount: Amount of damage to apply (reduces voxel health)
				- size: Radius of the spherical area to affect

				When a voxel's health reaches zero, it is destroyed and the "destroyed_voxels" signal is emitted.
			</description>
		</method>
		<method name="find_air_position_with_clearance">
			<return type="Vector3" />
			<param index="0" name="center_pos" type="Vector3" />
			<param index="1" name="radius" type="int" />
			<param index="2" name="required_clearance" type="float" />
			<description>
			</description>
		</method>
		<method name="find_closest_solid_point_to">
			<return type="Array" />
			<param index="0" name="pos" type="Vector3" />
			<param index="1" name="search_radius" type="int" />
			<description>
				Finds the closest solid voxel point to the given world position. Returns an Array containing the position of the closest solid point, or an empty Array if no solid point is found within the search radius.
			</description>
		</method>
		<method name="get_or_create_chunk">
			<return type="YVoxelChunk" />
			<param index="0" name="chunk_number" type="Vector3i" />
			<description>
			</description>
		</method>
		<method name="modify_voxel_area">
			<return type="void" />
			<param index="0" name="pos" type="Vector3i" />
			<param index="1" name="amount" type="float" />
			<param index="2" name="brushSize" type="int" />
			<param index="3" name="block_type" type="int" default="0" />
			<description>
			</description>
		</method>
		<method name="perlin_noise" qualifiers="static">
			<return type="float" />
			<param index="0" name="x" type="float" />
			<param index="1" name="y" type="float" />
			<description>
			</description>
		</method>
		<method name="perlin_noise_3d" qualifiers="static">
			<return type="float" />
			<param index="0" name="x" type="float" />
			<param index="1" name="y" type="float" />
			<param index="2" name="z" type="float" />
			<description>
			</description>
		</method>
		<method name="set_dirty_chunk">
			<return type="void" />
			<param index="0" name="chunkNumber" type="Vector3i" />
			<description>
			</description>
		</method>
		<method name="set_line">
			<return type="void" />
			<param index="0" name="start" type="Vector3i" />
			<param index="1" name="end" type="Vector3i" />
			<param index="2" name="value" type="float" />
			<param index="3" name="typeOfBlock" type="int" default="1" />
			<param index="4" name="thicknessStart" type="int" default="1" />
			<param index="5" name="thicknessEnd" type="int" default="1" />
			<description>
			</description>
		</method>
		<method name="smooth_voxel_area">
			<return type="void" />
			<param index="0" name="pos" type="Vector3i" />
			<param index="1" name="amount" type="float" />
			<param index="2" name="brushSize" type="int" />
			<description>
			</description>
		</method>
		<method name="try_get_chunk">
			<return type="YVoxelChunk" />
			<param index="0" name="chunk_number" type="Vector3i" />
			<description>
				Attempts to get the YVoxelChunk at the specified chunk position. Returns null if the chunk doesn't exist (unlike get_chunk which creates the chunk if it doesn't exist).
			</description>
		</method>
		<method name="voxel_to_world_position" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="voxel_pos" type="Vector3i" />
			<description>
			</description>
		</method>
		<method name="world_to_voxel_position" qualifiers="const">
			<return type="Vector3i" />
			<param index="0" name="world_pos" type="Vector3" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="calculate_custom_normals" type="bool" setter="set_calculate_custom_normals" getter="get_calculate_custom_normals" default="false">
		</member>
		<member name="cell_size" type="int" setter="set_cell_size" getter="get_cell_size" default="1">
			The size of grid cells used for terrain calculations. Larger values make terrain more spread out.
		</member>
		<member name="debug_pos" type="int" setter="set_debug_pos" getter="get_debug_pos" default="0">
			A position used for debugging operations, such as the target for the set_value method.
		</member>
		<member name="debugging_config" type="int" setter="set_debugging_config" getter="get_debugging_config" default="0">
			Configuration value used for various debugging options.
		</member>
		<member name="generate_grass" type="bool" setter="set_generate_grass" getter="get_generate_grass" default="false">
			Whether to generate grass on suitable terrain surfaces. Requires grass_mesh and grass_material to be set.
		</member>
		<member name="grass_material" type="Material" setter="set_grass_material" getter="get_grass_material">
			The material to use for rendering grass instances when generate_grass is true.
		</member>
		<member name="grass_mesh" type="Mesh" setter="set_grass_mesh" getter="get_grass_mesh">
			The mesh to use for rendering grass instances when generate_grass is true.
		</member>
		<member name="line_noise_frequency" type="float" setter="set_line_noise_frequency" getter="get_line_noise_frequency" default="0.1">
		</member>
		<member name="line_noise_strength" type="float" setter="set_line_noise_strength" getter="get_line_noise_strength" default="0.1">
		</member>
		<member name="material" type="Material" setter="set_material" getter="get_material">
		</member>
		<member name="serialize_when_generating" type="bool" setter="set_serialize_when_generating" getter="get_serialize_when_generating" default="true">
		</member>
		<member name="simplification_distance" type="float" setter="set_simplification_distance" getter="get_simplification_distance" default="0.0">
		</member>
		<member name="smooth_normal_angle" type="float" setter="set_smooth_normal_angle" getter="get_smooth_normal_angle" default="30.0">
		</member>
		<member name="smoothing" type="bool" setter="set_smoothing" getter="get_smoothing" default="false">
		</member>
		<member name="voxel_resolution" type="float" setter="set_voxel_resolution" getter="get_voxel_resolution" default="1.0">
		</member>
	</members>
	<signals>
		<signal name="destroyed_voxels">
			<param index="0" name="positions" type="Array" />
			<description>
				Emitted when voxels are destroyed by the damage_voxel_area method. The blocks parameter contains information about the destroyed voxels.
			</description>
		</signal>
		<signal name="finished">
			<description>
				Emitted when all queued chunk generation/updates have completed.
			</description>
		</signal>
	</signals>
</class>
