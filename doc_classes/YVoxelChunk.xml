<?xml version="1.0" encoding="UTF-8" ?>
<class name="YVoxelChunk" inherits="MeshInstance3D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A chunk-based component of the YarnVoxel system that represents and renders a portion of voxel terrain.
	</brief_description>
	<description>
		YVoxelChunk is a specialized MeshInstance3D that handles a discrete portion of terrain in the YarnVoxel system. Each chunk manages a 3D grid of voxel data and generates a mesh representation using the marching cubes algorithm.
		
		Chunks are automatically created and managed by the YarnVoxel system when needed, typically as the player moves through the world. Each chunk stores its data in a compact format that includes:
		- Density values for terrain shape (stored as float values)
		- Block type information (grass, dirt, stone, etc.)
		- Block health values for damage systems
		
		The YVoxelChunk handles:
		- Mesh generation from voxel data
		- Physics collision through an automatically created collision shape
		- Serialization/deserialization of chunk data for efficient storage
		- Terrain modification and queries
		- Seamless connection with neighboring chunks
		
		To optimize performance, chunks only regenerate their meshes when their data is modified, and boundary conditions are properly managed to ensure seamless terrain between chunks.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="deferred_set_dirty">
			<return type="void" />
			<description>
				Marks the chunk as "dirty" in the YarnVoxel system, which causes it to be queued for mesh regeneration. This is a deferred operation, meaning the regeneration happens in a later frame rather than immediately.
			</description>
		</method>
		<method name="generate">
			<return type="void" />
			<description>
				Generates the mesh for this chunk based on its current voxel data. This process uses the marching cubes algorithm to create a smooth surface representation of the terrain.
				
				During generation, the method will:
				1. Cache neighbor data for proper edge handling
				2. Compute the surface mesh based on voxel density values
				3. Create collision shapes for physics interactions
				4. Generate UVs, normals, and colors based on block types
				5. Emit the "completed_generation" signal when finished
				
				This is a computationally intensive operation that should not be called frequently.
			</description>
		</method>
		<method name="get_collision_layer_value" qualifiers="const">
			<return type="bool" />
			<param index="0" name="layer_number" type="int" />
			<description>
				Returns whether the specified physics layer (1-32) is enabled in the chunk's collision layer.
			</description>
		</method>
		<method name="get_collision_mask_value" qualifiers="const">
			<return type="bool" />
			<param index="0" name="layer_number" type="int" />
			<description>
				Returns whether the specified physics layer (1-32) is enabled in the chunk's collision mask.
			</description>
		</method>
		<method name="get_data">
			<return type="PackedByteArray" />
			<description>
				Returns the serialized voxel data for this chunk as a compressed byte array. This data includes terrain density values, block types, and health information using a run-length encoding scheme for efficiency.
			</description>
		</method>
		<method name="get_grass_count">
			<return type="int" />
			<description>
				Returns the number of grass instances placed on this chunk. Grass can be automatically generated on appropriate terrain surfaces when the YarnVoxel's "generate_grass" option is enabled.
			</description>
		</method>
		<method name="populate_chunk_3d">
			<return type="void" />
			<description>
				Populates this chunk with procedurally generated 3D terrain using Perlin noise. This creates a more complex terrain with features like caves and overhangs, unlike the 2D heightmap approach of populate_terrain().
				
				After populating the voxel data, the method automatically marks the chunk as dirty to trigger mesh regeneration.
			</description>
		</method>
		<method name="populate_terrain">
			<return type="void" />
			<param index="0" name="height" type="float" default="8" />
			<description>
				Populates this chunk with procedurally generated terrain using 2D Perlin noise as a height map. The height parameter affects the base terrain height.
				
				This method:
				1. Generates a height value for each x,z coordinate using Perlin noise
				2. Fills the chunk with appropriate voxel values based on the height map
				3. Marks the chunk as dirty to trigger mesh regeneration
				
				The terrain generated is similar to traditional heightmap-based terrain, without caves or overhangs.
			</description>
		</method>
		<method name="set_collision_layer_value">
			<return type="void" />
			<param index="0" name="layer_number" type="int" />
			<param index="1" name="value" type="bool" />
			<description>
				Sets whether the specified physics layer (1-32) is enabled in the chunk's collision layer. This determines which physics layers this chunk will collide with.
			</description>
		</method>
		<method name="set_collision_mask_value">
			<return type="void" />
			<param index="0" name="layer_number" type="int" />
			<param index="1" name="value" type="bool" />
			<description>
				Sets whether the specified physics layer (1-32) is enabled in the chunk's collision mask. This determines which physics layers this chunk will detect collisions with.
			</description>
		</method>
		<method name="set_data">
			<return type="void" />
			<param index="0" name="data" type="PackedByteArray" />
			<description>
				Sets the chunk's voxel data from a serialized byte array and triggers deserialization. This is used for loading chunks from storage or network transmission.
				
				The data should be in the format produced by get_data(), using a run-length encoding scheme for efficient storage.
			</description>
		</method>
	</methods>
	<members>
		<member name="bottom_corner_world_pos" type="Vector3" setter="set_bottom_corner_world_pos" getter="get_bottom_corner_world_pos" default="Vector3(0, 0, 0)">
			The world-space position of the bottom corner (minimum coordinates) of this chunk. This position is used as the origin point for local-to-world coordinate transformations within the chunk.
		</member>
		<member name="chunk_number" type="Vector3i" setter="set_chunk_number" getter="get_chunk_number" default="Vector3i(-99999, -99999, -99999)">
			The 3D grid coordinates of this chunk in the YarnVoxel system. Chunks are arranged in a 3D grid, and this vector identifies the chunk's position in that grid. Setting this property also updates the chunk's registration in the YarnVoxel system and recalculates its world position.
		</member>
		<member name="collision_layer" type="int" setter="set_collision_layer" getter="get_collision_layer" default="1">
			The physics collision layer(s) this chunk belongs to, as a bitmask. This determines which physics layers this chunk will collide with based on the collision mask of other objects.
		</member>
		<member name="collision_mask" type="int" setter="set_collision_mask" getter="get_collision_mask" default="1">
			The physics layer(s) this chunk will detect collisions with, as a bitmask. This determines which physics layers this chunk will interact with based on their collision layer.
		</member>
		<member name="collision_priority" type="float" setter="set_collision_priority" getter="get_collision_priority" default="1.0">
			The collision priority of this chunk, affecting how it resolves physics interactions. Higher values give this chunk precedence in collision resolution.
		</member>
		<member name="status" type="bool" setter="set_has_first_generated" getter="get_has_first_generated" default="false">
			Whether this chunk has been generated at least once. This is used to track initialization status and avoid redundant operations during the initial setup.
		</member>
	</members>
	<signals>
		<signal name="completed_generation">
			<param index="0" name="chunk_number" type="Vector3i" />
			<description>
				Emitted when the chunk finishes generating its mesh. The chunk_number parameter contains the 3D grid coordinates of the chunk that completed generation.
				
				This signal is used by the YarnVoxel system to manage chunk generation queues and notify when terrain modification operations are complete.
			</description>
		</signal>
	</signals>
</class>
